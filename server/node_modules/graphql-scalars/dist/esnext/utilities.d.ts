declare enum VALUE_RANGES {
    NEGATIVE = "NEGATIVE",
    NON_NEGATIVE = "NON_NEGATIVE",
    POSITIVE = "POSITIVE",
    NON_POSITIVE = "NON_POSITIVE"
}
declare enum VALUE_TYPES {
    INT = "int",
    FLOAT = "float"
}
declare const VALIDATIONS: {
    NonPositiveInt: {
        range: VALUE_RANGES;
        type: VALUE_TYPES;
    };
    PositiveInt: {
        range: VALUE_RANGES;
        type: VALUE_TYPES;
    };
    NonNegativeInt: {
        range: VALUE_RANGES;
        type: VALUE_TYPES;
    };
    NegativeInt: {
        range: VALUE_RANGES;
        type: VALUE_TYPES;
    };
    NonPositiveFloat: {
        range: VALUE_RANGES;
        type: VALUE_TYPES;
    };
    PositiveFloat: {
        range: VALUE_RANGES;
        type: VALUE_TYPES;
    };
    NonNegativeFloat: {
        range: VALUE_RANGES;
        type: VALUE_TYPES;
    };
    NegativeFloat: {
        range: VALUE_RANGES;
        type: VALUE_TYPES;
    };
};
declare function processValue(value: any, validation: {
    range: VALUE_RANGES;
    type: VALUE_TYPES;
}): number;
export { processValue, VALIDATIONS };
