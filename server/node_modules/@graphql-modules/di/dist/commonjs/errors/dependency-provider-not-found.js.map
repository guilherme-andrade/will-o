{"version":3,"file":"dependency-provider-not-found.js","sourceRoot":"","sources":["../../../src/errors/dependency-provider-not-found.ts"],"names":[],"mappings":";;AAAA,0BAAiE;AAEjE,MAAa,+BAAuD,SAAQ,KAAK;IAC/E,YACU,WAA0C,EAC1C,UAAwC,EACxC,WAAmB;QAE3B,KAAK,CAAC;;oBAEU,4BAAwB,CACpC,WAAW,CACZ,wCAAwC,4BAAwB,CAAC,UAAU,CAAC;qBAC9D,4BAAwB,CAAC,WAAW,CAAC,+BAA+B,WAAW;;;8DAGtC,4BAAwB,CAC9E,WAAW,CACZ,+BAA+B,4BAAwB,CAAC,UAAU,CAAC;GACvE,CAAC,CAAC;QAfO,gBAAW,GAAX,WAAW,CAA+B;QAC1C,eAAU,GAAV,UAAU,CAA8B;QACxC,gBAAW,GAAX,WAAW,CAAQ;QAc3B,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,+BAA+B,CAAC,SAAS,CAAC,CAAC;QACvE,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,+BAA+B,CAAC,CAAC;IACjE,CAAC;IAED,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;CACF;AAjCD,0EAiCC","sourcesContent":["import { ServiceIdentifier, getServiceIdentifierName } from '..';\n\nexport class DependencyProviderNotFoundError<Dependency, Dependent> extends Error {\n  constructor(\n    private _dependency: ServiceIdentifier<Dependency>,\n    private _dependent: ServiceIdentifier<Dependent>,\n    private _moduleName: string\n  ) {\n    super(`\n      GraphQL-Modules Error: Dependency Provider Not Found!\n      - Provider #${getServiceIdentifierName(\n        _dependency\n      )} couldn't be injected into Provider #${getServiceIdentifierName(_dependent)}\n      -- Provider #${getServiceIdentifierName(_dependency)} is not provided in #Module ${_moduleName} scope!\n\n      Possible solutions:\n      - Make sure you have imported the module of Provider #${getServiceIdentifierName(\n        _dependency\n      )} in the module of Provider #${getServiceIdentifierName(_dependent)}\n  `);\n    Object.setPrototypeOf(this, DependencyProviderNotFoundError.prototype);\n    Error.captureStackTrace(this, DependencyProviderNotFoundError);\n  }\n\n  get dependency(): ServiceIdentifier<Dependency> {\n    return this._dependency;\n  }\n\n  get dependent(): ServiceIdentifier<Dependent> {\n    return this._dependent;\n  }\n\n  get moduleName(): string {\n    return this._moduleName;\n  }\n}\n"]}