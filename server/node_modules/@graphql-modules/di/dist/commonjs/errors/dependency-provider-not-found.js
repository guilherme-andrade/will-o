"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
class DependencyProviderNotFoundError extends Error {
    constructor(_dependency, _dependent, _moduleName) {
        super(`
      GraphQL-Modules Error: Dependency Provider Not Found!
      - Provider #${__1.getServiceIdentifierName(_dependency)} couldn't be injected into Provider #${__1.getServiceIdentifierName(_dependent)}
      -- Provider #${__1.getServiceIdentifierName(_dependency)} is not provided in #Module ${_moduleName} scope!

      Possible solutions:
      - Make sure you have imported the module of Provider #${__1.getServiceIdentifierName(_dependency)} in the module of Provider #${__1.getServiceIdentifierName(_dependent)}
  `);
        this._dependency = _dependency;
        this._dependent = _dependent;
        this._moduleName = _moduleName;
        Object.setPrototypeOf(this, DependencyProviderNotFoundError.prototype);
        Error.captureStackTrace(this, DependencyProviderNotFoundError);
    }
    get dependency() {
        return this._dependency;
    }
    get dependent() {
        return this._dependent;
    }
    get moduleName() {
        return this._moduleName;
    }
}
exports.DependencyProviderNotFoundError = DependencyProviderNotFoundError;
//# sourceMappingURL=dependency-provider-not-found.js.map